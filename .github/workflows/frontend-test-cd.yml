name: Test Frontend CD # release 브랜치로 머지된 코드 자동 배포

on:
  push:
    branches: ["release-*"] # release-* 브랜치에 push 될 때만 실행
    paths-ignore:
      - "back/**" # 백엔드 파일 변경은 감지 안 함

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 깃허브 레포지토리 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Docker Buildx 설정 (멀티 플랫폼 빌드 지원)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Docker 이미지 빌드 및 Docker Hub에 푸시 (커밋 SHA를 태그로 사용)
      - name: Build and Push Docker Image
        id: build-image
        run: |
          IMAGE=${{ secrets.DOCKER_REPO }}/shortorial-fe
          docker buildx build --push -t $IMAGE:${{ github.sha }} -t $IMAGE:1.0.1 front

      # 5. AWS OIDC로 인증 (추정할 IAM Role과 GitHub 연결)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-2
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubTokenECSRole

      # 6.ECS Task Family에서 가장 최신 Revision을 조회하고 이미지 버전만 변경하여 새로운 Revision 생성
      - name: Render Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: shortorial-test-fe-task
          container-name: shortorial-fe-task
          image: ${{ secrets.DOCKER_REPO }}/shortorial-fe:${{ github.sha }}

      # 7. 최신 Revision으로 등록 후 서비스 업데이트
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition}}
          service: shortorial-test-fe-svc
          cluster: Shortorial
          wait-for-service-stability: true
